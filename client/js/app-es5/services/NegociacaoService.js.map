{"version":3,"sources":["../../app/services/NegociacaoService.js"],"names":["HttpService","NegociacaoDao","ConnectionFactory","NegociacaoService","_http","Promise","resolve","reject","get","then","res","catch","error","data","post","all","getSemana","getAnterior","getRetrasada","getConnection","connection","dao","add","listAll","removeAll","message","currentList","getAll","filter","item","some","itemExist","JSON","stringify"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService.js';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao.js';\r\nimport {ConnectionFactory} from './ConnectionFactory.js';\r\n\r\nexport class NegociacaoService {\r\n\r\n    constructor() {\r\n        this._http = new HttpService();\r\n    }\r\n    \r\n    getSemana() {       \r\n        return new Promise((resolve, reject) =>{\r\n            this._http.get('negociacoes/semana')\r\n            .then(res => resolve(res))\r\n            .catch((error) => reject('Não foi possivel importar as Negociações da semana!'));        \r\n        });\r\n    }\r\n\r\n    getAnterior() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/anterior')\r\n            .then(res => resolve(res))\r\n            .catch((error) => reject('Não foi possivel importar as Negociações da semana Anterior!'));        \r\n        });\r\n    }\r\n\r\n    getRetrasada() {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.get('negociacoes/retrasada')\r\n            .then(res => resolve(res))\r\n            .catch((error) => reject('Não foi possivel importar as Negociações da semana retrasada!'));        \r\n        });\r\n    }\r\n\r\n    setNegociacaoServer(data) {\r\n        return new Promise((resolve, reject) => {\r\n            this._http.post('/negociacoes', data)\r\n            .then(res => resolve(res))\r\n            .catch((error) => reject(`Não foi possível enviar a negociação: ${error}`));        \r\n        });\r\n    }\r\n\r\n    getAll() {\r\n        return new Promise((resolve, reject) => {\r\n            Promise.all([\r\n                this.getSemana(), \r\n                this.getAnterior(), \r\n                this.getRetrasada()\r\n            ])\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error));  \r\n        });\r\n    }\r\n\r\n    register(data) {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.add(data))\r\n                .then(() => resolve('Negociação adcionado com sucesso!'))\r\n                .catch(error => reject(error));\r\n        })\r\n    }\r\n\r\n    listAll() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection=> new NegociacaoDao(connection))\r\n                .then(dao => dao.listAll())\r\n                .then(data => resolve(data))\r\n                .catch(error => reject(error));\r\n        });\r\n    }\r\n\r\n    removeAll() {\r\n        return new Promise((resolve, reject) => {\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection=> new NegociacaoDao(connection))\r\n                .then(dao => dao.removeAll())\r\n                .then(message => resolve(message))\r\n                .catch(error => reject(error));\r\n        })\r\n    }\r\n\r\n    import(currentList) {\r\n        return new Promise((resolve, reject) => {\r\n            this.getAll()\r\n            .then(res => res.filter((item) => \r\n                !currentList.some( (itemExist) => {\r\n                    JSON.stringify(item) == JSON.stringify(itemExist)\r\n                }) \r\n            ))\r\n            .then(data => resolve(data))\r\n            .catch(error => reject(error));  \r\n\r\n        })\r\n    }\r\n}"]}