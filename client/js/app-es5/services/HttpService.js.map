{"version":3,"sources":["../../app/services/HttpService.js"],"names":["HttpService","_headers","Headers","append","url","headers","Promise","resolve","reject","fetch","method","mode","cache","then","_handleErrors","response","catch","error","message","data","body","JSON","stringify","ok","Error","statusText","json"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;AAET,uCAAc;AAAA;;AACV,yBAAKC,QAAL,GAAgB,IAAIC,OAAJ,EAAhB;AACA,yBAAKD,QAAL,CAAcE,MAAd,CAAqB,QAArB,EAA+B,kBAA/B;AACA,yBAAKF,QAAL,CAAcE,MAAd,CAAqB,cAArB,EAAqC,kBAArC;AACH;;;;wCAEGC,G,EAAmB;AAAA;;AAAA,4BAAdC,OAAc,uEAAJ,EAAI;;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,kCAAML,GAAN,EAAW;AACPM,wCAAQ,KADD;AAEPL,yCAAS,MAAKJ,QAFP;AAGPU,sCAAM,MAHC;AAIPC,uCAAO;AAJA,6BAAX,EAMCC,IAND,CAMM,MAAKC,aANX,EAOCD,IAPD,CAOM;AAAA,uCAAYN,QAAQQ,QAAR,CAAZ;AAAA,6BAPN,EAQCC,KARD,CAQO,UAACC,KAAD;AAAA,uCAAWT,OAAOS,MAAMC,OAAb,CAAX;AAAA,6BARP;AASH,yBAVM,CAAP;AAWH;;;yCAEId,G,EAAKe,I,EAAoB;AAAA;;AAAA,4BAAdd,OAAc,uEAAJ,EAAI;;AAC1B,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpCC,kCAAML,GAAN,EAAW;AACPM,wCAAQ,MADD;AAEPL,yCAAS,OAAKJ,QAFP;AAGPU,sCAAM,MAHC;AAIPS,sCAAMC,KAAKC,SAAL,CAAeH,IAAf,CAJC;AAKPP,uCAAO;AALA,6BAAX,EAOCC,IAPD,CAOM,OAAKC,aAPX,EAQCD,IARD,CAQM;AAAA,uCAAYN,QAAQQ,QAAR,CAAZ;AAAA,6BARN,EASCC,KATD,CASO,UAACC,KAAD;AAAA,uCAAWT,OAAOS,MAAMC,OAAb,CAAX;AAAA,6BATP;AAUH,yBAXM,CAAP;AAYH;;;kDAEaH,Q,EAAU;AACpB,4BAAI,CAACA,SAASQ,EAAd,EAAkB;AACd,kCAAMC,MAAMT,SAASU,UAAf,CAAN;AACH;AACD,+BAAOV,SAASW,IAAT,EAAP;AACH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n\r\n    constructor() {\r\n        this._headers = new Headers();\r\n        this._headers.append('Accept', 'application/json')\r\n        this._headers.append('Content-Type', 'application/json')\r\n    }\r\n\r\n    get(url, headers = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, { \r\n                method: 'GET',\r\n                headers: this._headers,\r\n                mode: 'cors',\r\n                cache: 'default' \r\n            })\r\n            .then(this._handleErrors)\r\n            .then(response => resolve(response))\r\n            .catch((error) => reject(error.message));\r\n        })\r\n    }\r\n\r\n    post(url, data, headers = {}) {\r\n        return new Promise((resolve, reject) => {\r\n            fetch(url, { \r\n                method: 'POST',\r\n                headers: this._headers,\r\n                mode: 'cors',\r\n                body: JSON.stringify(data),\r\n                cache: 'default' \r\n            })\r\n            .then(this._handleErrors)\r\n            .then(response => resolve(response))\r\n            .catch((error) => reject(error.message));\r\n        })\r\n    }\r\n\r\n    _handleErrors(response) {\r\n        if (!response.ok) {\r\n            throw Error(response.statusText);         \r\n        }\r\n        return response.json();          \r\n    }\r\n\r\n    // get(url) {\r\n\r\n    //     fetch(url)\r\n    //         .then(res => this._handleErrors(res))\r\n    //         .then(res => res.json());\r\n    // }\r\n\r\n    // post(url, dado) {\r\n\r\n    //     fetch(url, { \r\n    //         headers: { 'Content-Type': 'application/json' },\r\n    //         method: 'post',\r\n    //         body: JSON.stringify(dado)\r\n    //     })\r\n    //     .then(res => this._handleErrors(res)); \r\n    // }\r\n}"]}